<%= form_with model: @event, url: user_user_events_path, method: :post, id: "myForm" do |f| %>
  <div class="mb-4">
    <%= f.label :title, "予定内容", class: "block text-gray-700 text-sm font-bold mb-2" %>
    <%= f.text_field :title, id: "event_plan", class: "form-input mt-1 block w-full rounded-md shadow-sm", required: true %>
  </div>
  <div class="grid grid-cols-2 gap-4 mb-4">
    <div>
      <%= f.label :start, "開始時刻", class: "block text-gray-700 text-sm font-bold mb-2" %>
      <div class="flex items-center">
        <%= f.date_select :start, { default: Date.today }, class: "form-select mt-1 block w-full rounded-md shadow-sm" %>
        <%= select_tag 'start_time_hour', options_for_select((0..23).map { |h| [h.to_s.rjust(2, '0'), h] }, Time.now.strftime('%H').to_i), class: "ml-1 form-select mt-1 block w-1/3 rounded-md shadow-sm text-xs", prompt: "Hour" %>
        <%= select_tag 'start_time_minute', options_for_select((0..59).map { |m| [m.to_s.rjust(2, '0'), m] }, Time.now.strftime('%M').to_i), class: "ml-1 form-select mt-1 block w-1/3 rounded-md shadow-sm text-xs", prompt: "Minute" %>
      </div>
    </div>
    <div>
      <%= f.label :end, "終了時刻", class: "block text-gray-700 text-sm font-bold mb-2" %>
      <div class="flex items-center">
        <%= f.date_select :end, { default: Date.today }, class: "form-select mt-1 block w-full rounded-md shadow-sm" %>
        <%= select_tag 'end_time_hour', options_for_select((0..23).map { |h| [h.to_s.rjust(2, '0'), h] }, Time.now.strftime('%H').to_i), class: "ml-1 form-select mt-1 block w-1/3 rounded-md shadow-sm text-xs", prompt: "Hour" %>
        <%= select_tag 'end_time_minute', options_for_select((0..59).map { |m| [m.to_s.rjust(2, '0'), m] }, Time.now.strftime('%M').to_i), class: "ml-1 form-select mt-1 block w-1/3 rounded-md shadow-sm text-xs", prompt: "Minute" %>
      </div>
    </div>
  </div>
  <div class="flex justify-end">
    <%= f.submit "登録", class: "bg-green-500 hover:bg-green-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline" %>
  </div>
<% end %>




<script>
  // フォーム送信イベントのキャプチャ
  document.getElementById('myForm').addEventListener('submit', function(event) {
    event.preventDefault(); // デフォルトのフォーム送信を停止

    // FormDataオブジェクトを作成
    var formData = new FormData(this);

    // Ajaxリクエストの送信
    fetch(this.action, {
      method: this.method,
      body: formData,
      headers: {
        'X-Requested-With': 'XMLHttpRequest' // リクエストがAjaxであることを示すヘッダーを追加
      }
    })
    .then(response => response.json()) // JSON形式でレスポンスを解析
    .then(data => {
      // 成功した場合の処理を記述（例：モーダルを閉じる）
      closeModal(); // closeModal関数を呼び出す必要があります
    })
    .catch(error => {
      console.error('Error:', error);
    });
  });
</script>
